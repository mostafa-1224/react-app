{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Todo","props","className","style","textDecoration","todo","isCompleted","text","onClick","notCompleteHandler","index","completeHandler","removeHandler","TodoForm","useState","newTodo","setValue","handleSubmit","e","preventDefault","addTodo","onSubmit","placeholder","type","value","onChange","target","App","todos","setTodos","removeTodo","ind","todoss","splice","console","log","completedTodo","todoos","notCompletedTodo","map","key","Todossss","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAIA,SAASA,EAAMC,GAWb,OACE,yBAAKC,UAAY,QACf,uBAAGC,MAAS,CAACC,eAAiBH,EAAMI,KAAKC,YAAc,eAAiB,eAAiBL,EAAMI,KAAKE,MACpG,4BAAQC,QANe,WACzBP,EAAMQ,mBAAmBR,EAAMS,SAK7B,iBACA,4BAAQF,QAVY,WACtBP,EAAMU,gBAAgBV,EAAMS,SAS1B,aACA,4BAAQF,QAdU,WACpBP,EAAMW,cAAcX,EAAMS,SAaxB,WAIN,SAASG,EAAUZ,GAAO,IAAD,EACKa,mBAAU,IADf,mBAChBC,EADgB,KACPC,EADO,KAGjBC,EAAe,SAACC,GACpBA,EAAEC,iBACEJ,IACJd,EAAMmB,QAAQL,GACdC,EAAU,MAGZ,OACE,0BAAMK,SAAYJ,GAEd,2CACA,2BAAOK,YAAc,UAAUC,KAAO,OAAQC,MAAST,EAASU,SAAW,SAACP,GAAOF,EAASE,EAAEQ,OAAOF,UACrG,4BAAQhB,QAAWS,GAAnB,eAsDOU,MAlDf,WAAgB,IAAD,EAEab,mBACxB,CACA,CAACP,KAAO,QACRD,aAAc,GAEd,CACEC,KAAO,MACPD,aAAc,GAEhB,CACEC,KAAO,OACPD,aAAc,KAbL,mBAENsB,EAFM,KAECC,EAFD,KAmBLC,EAAa,SAAAC,GACjB,IAAMC,EAAM,YAAOJ,GACnBI,EAAOC,OAAOF,EAAK,GACnBF,EAASG,GACTE,QAAQC,IAAI,gBAENC,EAAgB,SAAAL,GACtB,IAAIM,EAAM,YAAOT,GACjBS,EAAON,GAAKzB,aAAc,EAC1BuB,EAASQ,GACTH,QAAQC,IAAI,gBAENG,EAAmB,SAAAP,GACzB,IAAIM,EAAM,YAAOT,GACjBS,EAAON,GAAKzB,aAAc,EAC1BuB,EAASQ,GACTH,QAAQC,IAAI,yBAEhB,OACE,yBAAKjC,UAAU,OACb,yBAAKA,UAAY,WACf,yBAAKA,UAAY,cACd0B,EAAMW,KAAI,SAAClC,EAAMK,GAAP,OAAkB,kBAACV,EAAD,CAAMS,mBAAsB6B,EAAkB3B,gBAAmByB,EAAgBxB,cAAiBkB,EAAYU,IAAO9B,EAAOA,MAASA,EAAOL,KAAQA,OACjL,kBAACQ,EAAD,CAAWO,QA3BD,SAACb,GACf,IAAMkC,EAAQ,sBAAOb,GAAP,CAAc,CAACrB,UAC7BsB,EAAUY,QA4BV,yBAAKtC,MAAS,CAACuC,UAAY,aC5EbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.80b38ed3.chunk.js","sourcesContent":["import React, { useState }from 'react';\n\nimport './App.css';\n\nfunction Todo (props){\n  \n  const removeHandler = () =>{\n    props.removeHandler(props.index);\n  }\n  const completeHandler = () =>{\n    props.completeHandler(props.index);\n  }\n  const notCompleteHandler = () =>{\n    props.notCompleteHandler(props.index);\n  }\n  return(\n    <div className = 'todo'>\n      <p style = {{textDecoration : props.todo.isCompleted ? 'line-through' : 'under-line' }}>{props.todo.text}</p>\n      <button onClick = {notCompleteHandler}>NOT Completed</button>\n      <button onClick = {completeHandler}>Completed</button>\n      <button onClick = {removeHandler}>Remove</button>\n    </div>\n  )\n}\nfunction TodoForm (props){\n  const [newTodo, setValue] = useState( '' )\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if(!newTodo) return ;\n    props.addTodo(newTodo);\n    setValue( '' );\n  }\n\n  return(\n    <form onSubmit = {handleSubmit}>\n\n        <label>Add Todo</label>\n        <input placeholder = \"Ur Todo\" type = 'text'  value = {newTodo} onChange={ (e) => {setValue(e.target.value)} }/>\n        <button onClick = {handleSubmit} > Add Todo </button>\n    </form>\n  )}\n\nfunction App() {\n\n  const [todos, setTodos] = useState(\n    [\n    {text : 'study',\n    isCompleted : false\n    },\n    {\n      text : 'eat',\n      isCompleted : false\n    },\n    {\n      text : 'play',\n      isCompleted : false\n    }])\n    const addTodo = (text) => {\n      const Todossss = [...todos, {text}];\n      setTodos (Todossss);\n    }\n    const removeTodo = ind => {\n      const todoss = [...todos]\n      todoss.splice(ind, 1);\n      setTodos(todoss);\n      console.log('got clicked');\n      }\n      const completedTodo = ind => {\n      let todoos = [...todos]\n      todoos[ind].isCompleted = true;\n      setTodos(todoos);\n      console.log('got clicked');\n      }\n      const notCompletedTodo = ind => {\n      let todoos = [...todos]\n      todoos[ind].isCompleted = false;\n      setTodos(todoos);\n      console.log('got clicked from not');\n      }\n  return (\n    <div className=\"App\">\n      <div className = \"wrapper\">\n        <div className = 'todos-list'>\n          {todos.map((todo, index) =>  <Todo notCompleteHandler = {notCompletedTodo} completeHandler = {completedTodo}  removeHandler = {removeTodo} key = {index} index = {index} todo = {todo} /> )}\n          <TodoForm  addTodo = {addTodo} />\n        </div>\n      </div>  \n      <div style = {{marginTop : \"500px\"}}></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}